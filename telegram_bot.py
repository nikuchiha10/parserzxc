import logging
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import asyncio
import os
from datetime import datetime

from core.advanced_parser import AdvancedKnowledgeParser
from core.article_manager import ArticleManager
from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class KnowledgeParserBot:
    def __init__(self):
        self.parser = AdvancedKnowledgeParser()
        self.article_manager = ArticleManager(config.DATA_DIR)
        self.app = Application.builder().token(config.TELEGRAM_TOKEN).build()
        self.setup_handlers()
        self.setup_commands()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("parse", self.parse_articles))
        self.app.add_handler(CommandHandler("search", self.search_articles))
        self.app.add_handler(CommandHandler("stats", self.show_stats))
        self.app.add_handler(CommandHandler("export", self.export_data))
        self.app.add_handler(CommandHandler("help", self.help))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("admin", self.admin_panel))
        self.app.add_handler(CommandHandler("status", self.system_status))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("parse", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π"),
            BotCommand("search", "–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("export", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            BotCommand("help", "–ü–æ–º–æ—â—å")
        ]
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        is_admin = user.id in config.ADMIN_IDS
        
        welcome_text = f"""
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!*

*PRO –ü–∞—Ä—Å–µ—Ä –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π* –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π
/search - –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º  
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/parse 10` - —Å–ø–∞—Ä—Å–∏—Ç—å 10 —Å—Ç–∞—Ç–µ–π
`/search –ª—å–≥–æ—Ç—ã` - –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ –ª—å–≥–æ—Ç—ã
`/export excel` - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
        """.strip()
        
        if is_admin:
            welcome_text += "\n\n‚ö° *–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*"
            welcome_text += "\n/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            welcome_text += "\n/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def parse_articles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse"""
        user_id = update.effective_user.id
        
        if user_id not in config.ADMIN_IDS:
            await update.message.reply_text("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*\n–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥.", 
                                          parse_mode='Markdown')
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        article_count = 5
        if context.args:
            try:
                article_count = int(context.args[0])
                article_count = min(article_count, config.MAX_ARTICLES_PER_RUN)
            except ValueError:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: `/parse 10`", parse_mode='Markdown')
                return
        
        await update.message.reply_text(f"üöÄ *–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {article_count} —Å—Ç–∞—Ç–µ–π...*\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", 
                                      parse_mode='Markdown')
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫)
            articles_list = self.load_articles_list()[:article_count]
            
            if not articles_list:
                await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –ø—É—Å—Ç!")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            results = await asyncio.get_event_loop().run_in_executor(
                None, self.parser.parse_articles_batch, articles_list, article_count
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.format_parsing_report(results)
            await update.message.reply_text(report, parse_mode='Markdown')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            if results['success'] > 0:
                csv_path = self.parser.article_manager.export_to_csv()
                if csv_path and os.path.exists(csv_path):
                    await update.message.reply_document(
                        document=open(csv_path, 'rb'),
                        filename=f"articles_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        caption="üìä *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV*"
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:*\n`{str(e)}`", parse_mode='Markdown')
    
    async def search_articles(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: `/search –ª—å–≥–æ—Ç—ã`", parse_mode='Markdown')
            return
        
        query = " ".join(context.args)
        await update.message.reply_text(f"üîç *–ò—â–µ–º: *\"{query}\"*...*", parse_mode='Markdown')
        
        try:
            results = self.article_manager.search_articles(query)
            
            if not results:
                await update.message.reply_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"*üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}*\n\n"
            
            for i, result in enumerate(results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                response += f"*{i+1}. {result['title']}*\n"
                response += f"üìÑ {result['excerpt']}\n"
                response += f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é]({result['url']})\n"
                response += f"üìä –°–ª–æ–≤: {result['word_count']}\n\n"
            
            if len(results) > 5:
                response += f"*... –∏ –µ—â–µ {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤*"
            
            await update.message.reply_text(response, parse_mode='Markdown', disable_web_page_preview=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:*\n`{str(e)}`", parse_mode='Markdown')
    
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            stats = self.parser.get_detailed_stats()
            
            stats_text = f"""
üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

*–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*
üìà –°—Ç–∞—Ç–µ–π: {stats['total_articles']}
üìù –°–ª–æ–≤ –≤—Å–µ–≥–æ: {stats['total_words']:,}
üíæ –í–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {stats['parser_version']}

*–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫:*
üïí {stats.get('last_run', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

*–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞:*
‚úÖ –ù–∞–π–¥–µ–Ω–æ: {stats.get('articles_found', 0)}
üìñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('articles_parsed', 0)}
üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1f}%
            """.strip()
            
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def export_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export"""
        user_id = update.effective_user.id
        
        if user_id not in config.ADMIN_IDS:
            await update.message.reply_text("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*", parse_mode='Markdown')
            return
        
        export_type = "excel"
        if context.args:
            export_type = context.args[0].lower()
        
        await update.message.reply_text(f"üì§ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ {export_type.upper()}...*", parse_mode='Markdown')
        
        try:
            if export_type == "excel":
                file_path = self.parser.article_manager.export_to_excel()
                filename = f"knowledge_base_export_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"
                caption = "üìä *–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel*"
            else:
                file_path = self.parser.article_manager.export_to_csv()
                filename = f"knowledge_base_export_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
                caption = "üìä *–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV*"
            
            if file_path and os.path.exists(file_path):
                await update.message.reply_document(
                    document=open(file_path, 'rb'),
                    filename=filename,
                    caption=caption,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:*\n`{str(e)}`", parse_mode='Markdown')
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if user_id not in config.ADMIN_IDS:
            await update.message.reply_text("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*", parse_mode='Markdown')
            return
        
        admin_text = """
‚ö° *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*

*–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/parse - –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ü–∞—Ä—Å–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ì–æ—Ç–æ–≤–∞ ‚úÖ
‚Ä¢ –õ–æ–≥–∏: –í–∫–ª—é—á–µ–Ω—ã ‚úÖ

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
`/parse 10` - –ü–∞—Ä—Å–∏–Ω–≥ 10 —Å—Ç–∞—Ç–µ–π
`/export excel` - –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
`/status` - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        """.strip()
        
        await update.message.reply_text(admin_text, parse_mode='Markdown')
    
    async def system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        user_id = update.effective_user.id
        
        if user_id not in config.ADMIN_IDS:
            await update.message.reply_text("‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!*", parse_mode='Markdown')
            return
        
        try:
            import psutil
            import platform
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            status_text = f"""
üñ•Ô∏è *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã*

*–°–∏—Å—Ç–µ–º–∞:*
üíª OS: {platform.system()} {platform.release()}
üêç Python: {platform.python_version()}
üìä –ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
üíæ –î–∏—Å–∫: {disk.percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ

*–ü–∞—Ä—Å–µ—Ä:*
üîß –í–µ—Ä—Å–∏—è: 2.0.0
üìà –°—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: {self.parser.article_manager.get_stats()['total_articles']}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

*–°—Ç–∞—Ç—É—Å:*
‚úÖ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
‚úÖ –ü–∞—Ä—Å–µ—Ä: –ì–æ—Ç–æ–≤
‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –†–∞–±–æ—Ç–∞–µ—Ç
            """.strip()
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö *PRO –ü–∞—Ä—Å–µ—Ä –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/parse [—á–∏—Å–ª–æ] - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π
/search [–∑–∞–ø—Ä–æ—Å] - –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/export [—Ç–∏–ø] - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (excel/csv)

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/parse 15` - —Å–ø–∞—Ä—Å–∏—Ç—å 15 —Å—Ç–∞—Ç–µ–π
`/search "–∑–∞–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–∞"` - –ø–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–µ
`/export excel` - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel —Ñ–æ—Ä–º–∞—Ç
`/stats` - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∞–ª–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫–∞–ø–∞
        """.strip()
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        responses = {
            '–ø—Ä–∏–≤–µ—Ç': 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø PRO –ø–∞—Ä—Å–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.',
            '—Å–ø–∞—Å–∏–±–æ': 'ü§ù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!',
            '—Å—Ç–∞—Ç—É—Å': 'üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ /status –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.',
            '–ø–æ–º–æ—â—å': 'üìö –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.'
        }
        
        response = responses.get(text.lower(), 
                               'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º. /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.')
        
        await update.message.reply_text(response)
    
    def load_articles_list(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑ 847 —Å—Ç–∞—Ç–µ–π
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
        return [
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç/—ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º-–Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞–º",
            "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã)",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π",
            "–ì—Ä–∞—Ñ–∏–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤ –Æ–õ",
            "–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—é –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –î–ó",
            "–ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –ü–£ –≤ –ë–î",
            "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –ü–£",
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–î–ó)",
            "–í–æ–ø—Ä–æ—Å—ã - –æ—Ç–≤–µ—Ç—ã –ï–õ–ö –ñ–ö–•",
            "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –ï–õ–ö –ñ–ö–•"
        ]
    
    def format_parsing_report(self, results: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        success_rate = (results['success'] / (results['success'] + results['failed']) * 100) if (results['success'] + results['failed']) > 0 else 0
        
        report = f"""
üìä *–û–¢–ß–ï–¢ –û –ü–ê–†–°–ò–ù–ì–ï*

‚úÖ *–£—Å–ø–µ—à–Ω–æ:* {results['success']}
‚ùå *–û—à–∏–±–∫–∏:* {results['failed']}
‚è≠Ô∏è *–ü—Ä–æ–ø—É—â–µ–Ω–æ:* {results.get('skipped', 0)}

‚è±Ô∏è *–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {results['total_time']:.2f} —Å–µ–∫
üìà *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {success_rate:.1f}%

üíæ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚Ä¢ –°—Ç–∞—Ç—å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ `{config.DATA_DIR}`
‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV/Excel
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞
        """.strip()
        
        return report
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ PRO Telegram –±–æ—Ç–∞...")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        self.app.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = KnowledgeParserBot()
    bot.run()

if __name__ == "__main__":
    main()
