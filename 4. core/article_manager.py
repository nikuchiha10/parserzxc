import json
import pandas as pd
import os
import hashlib
from datetime import datetime
from typing import List, Dict
import logging
from .parser_engine import Article

class ArticleManager:
    def __init__(self, data_dir: str):
        self.data_dir = data_dir
        self.articles_file = os.path.join(data_dir, "articles.json")
        self.stats_file = os.path.join(data_dir, "stats.json")
        self.setup_directories()
        self.logger = logging.getLogger(__name__)
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        os.makedirs(self.data_dir, exist_ok=True)
    
    def generate_article_id(self, article: Article) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
        content_hash = hashlib.md5(article.content.encode()).hexdigest()[:10]
        title_slug = "".join(c for c in article.title if c.isalnum())[:20]
        return f"{title_slug}_{content_hash}"
    
    def save_article(self, article: Article) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ JSON"""
        try:
            article_id = self.generate_article_id(article)
            
            article_data = {
                'id': article_id,
                'title': article.title,
                'url': article.url,
                'content': article.content,
                'category': article.category,
                'tags': article.tags,
                'metadata': article.metadata,
                'word_count': article.word_count,
                'timestamp': article.timestamp,
                'parsed_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
            filename = f"{article_id}.json"
            filepath = os.path.join(self.data_dir, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(article_data, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∏–Ω–¥–µ–∫—Å
            self.update_articles_index(article_data)
            
            self.logger.info(f"üíæ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
            return filepath
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏: {e}")
            return ""
    
    def update_articles_index(self, article_data: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–∞—Ç–µ–π"""
        try:
            index_file = os.path.join(self.data_dir, "articles_index.json")
            
            if os.path.exists(index_file):
                with open(index_file, 'r', encoding='utf-8') as f:
                    index = json.load(f)
            else:
                index = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞
            index_entry = {
                'id': article_data['id'],
                'title': article_data['title'],
                'url': article_data['url'],
                'category': article_data['category'],
                'word_count': article_data['word_count'],
                'timestamp': article_data['timestamp']
            }
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            index = [item for item in index if item['id'] != index_entry['id']]
            index.append(index_entry)
            
            with open(index_file, 'w', encoding='utf-8') as f:
                json.dump(index, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
    
    def export_to_csv(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –≤ CSV"""
        try:
            index_file = os.path.join(self.data_dir, "articles_index.json")
            
            if not os.path.exists(index_file):
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return ""
            
            with open(index_file, 'r', encoding='utf-8') as f:
                index = json.load(f)
            
            df = pd.DataFrame(index)
            csv_path = os.path.join(self.data_dir, "articles_export.csv")
            df.to_csv(csv_path, index=False, encoding='utf-8-sig')
            
            self.logger.info(f"üìä CSV —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {csv_path}")
            return csv_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            return ""
    
    def export_to_excel(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            articles_data = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–µ–π
            for filename in os.listdir(self.data_dir):
                if filename.endswith('.json') and filename != 'articles_index.json':
                    filepath = os.path.join(self.data_dir, filename)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        article = json.load(f)
                        articles_data.append(article)
            
            if not articles_data:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel")
                return ""
            
            df = pd.DataFrame(articles_data)
            excel_path = os.path.join(self.data_dir, "articles_export.xlsx")
            
            with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–°—Ç–∞—Ç—å–∏', index=False)
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                stats_data = {
                    '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π', '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤', '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [len(articles_data), df['word_count'].sum(), datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
                }
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            self.logger.info(f"üìä Excel —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {excel_path}")
            return excel_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
            return ""
    
    def search_articles(self, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            results = []
            query = query.lower()
            
            for filename in os.listdir(self.data_dir):
                if filename.endswith('.json') and filename != 'articles_index.json':
                    filepath = os.path.join(self.data_dir, filename)
                    with open(filepath, 'r', encoding='utf-8') as f:
                        article = json.load(f)
                        
                        # –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                        if (query in article['title'].lower() or 
                            query in article['content'].lower() or
                            any(query in tag.lower() for tag in article.get('tags', []))):
                            
                            results.append({
                                'id': article['id'],
                                'title': article['title'],
                                'url': article['url'],
                                'excerpt': article['content'][:200] + '...',
                                'word_count': article['word_count'],
                                'timestamp': article['timestamp']
                            })
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            index_file = os.path.join(self.data_dir, "articles_index.json")
            
            if not os.path.exists(index_file):
                return {'total_articles': 0, 'total_words': 0}
            
            with open(index_file, 'r', encoding='utf-8') as f:
                index = json.load(f)
            
            total_words = sum(article.get('word_count', 0) for article in index)
            
            return {
                'total_articles': len(index),
                'total_words': total_words,
                'last_update': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_articles': 0, 'total_words': 0}
